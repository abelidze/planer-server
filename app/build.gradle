import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
    id 'java-library'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'io.dcow.sublime' version '0.9.2'
    id 'io.franzbecker.gradle-lombok' version '2.1'
    id 'net.ltgt.apt' version '0.18'
}

group = 'com.skillmasters'
version = '0.0.1'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    jcenter()
}

// compileJava {
//     options.encoding = 'UTF-8'
//     options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
// }

dependencies {
    compile 'com.querydsl:querydsl-core:4.2.1'
    compile 'com.querydsl:querydsl-jpa:4.2.1'
    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor(
        'com.querydsl:querydsl-apt:4.2.1:jpa',
        'org.springframework.boot:spring-boot-starter-data-jpa',
        'org.springframework.boot:spring-boot-starter-jdbc',
        'org.projectlombok:lombok:1.18.6'
    )

    // implementation 'javax.persistence:persistence-api:1.0'
    implementation 'com.querydsl:querydsl-jpa:4.2.1'
    implementation 'com.google.guava:guava:27.1-jre'

    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation ('io.springfox:springfox-swagger2:2.9.2') {
        exclude module: 'swagger-annotations'
        exclude module: 'swagger-models'
    }
    implementation 'io.swagger:swagger-annotations:1.5.21'
    implementation 'io.swagger:swagger-models:1.5.21'

    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'org.javassist:javassist'
    implementation 'net.sf.biweekly:biweekly:0.6.3'
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
    implementation 'com.google.firebase:firebase-admin:6.8.1'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    // implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    runtimeOnly 'org.xerial:sqlite-jdbc:3.27.2'
    runtimeOnly 'com.h2database:h2:1.4.199'
    // runtimeOnly 'org.postgresql:postgresql'
}

//fancy test output
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED
               // TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}